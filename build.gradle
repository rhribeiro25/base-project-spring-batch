plugins {
    id 'org.springframework.boot' version '2.5.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "com.palantir.docker" version "0.26.0"
    id 'java'
    id 'jacoco'
}

ext {
    appVersion = '1.0.1'
    appName = 'base-project-spring-batch'
    modelMapperVersion = "2.4.4"
}

group = 'rhribeiro25'
version = "${appVersion}"
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // SPRING FRAMEWORKS
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation "org.springframework.boot:spring-boot-devtools"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-batch"
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "org.springframework.boot:spring-boot-configuration-processor"

    // MODEL MAPPER
    implementation "org.modelmapper:modelmapper:${modelMapperVersion}"

    // LOMBOK
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // POSTGRESQL CONNECTOR
    runtimeOnly "org.postgresql:postgresql"

    // JUNIT
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.0'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.7.0'
    testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.7.0'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.7.0'
    testImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.7.0'

    // TEST DEPENDENCIES
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.batch:spring-batch-test"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

// TEST
check.dependsOn jacocoTestCoverageVerification
jacoco {
    toolVersion = '0.8.6'
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }
            element = 'CLASS'
            excludes = ['br.com.rhribeiro.baseprojectspringbatch.core.dtos.*']
        }
    }
}
jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        html.enabled true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['br/com/rhribeiro25/baseprojectspringbatch/core/dtos/*'])
        }))
    }
}
test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter', 'junit-vintage'
    }
    finalizedBy jacocoTestReport
}

// DOCKER
bootJar {
    baseName = "${appName}"
    version = "${appVersion}"
}
task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}
docker {
    name "${project.group}/${bootJar.baseName}"
    tags "${bootJar.version}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}